# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

commands:
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7}

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  create_infrastructure:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: amazon/aws-cli
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
              --template-file template.yml \
              --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7} \
              --region us-east-1
  
  # capture:
  #   docker:
  #     - image: amazon/aws-cli
    
  #   steps:
  #     - run: |
  #         aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #           --output text >> inventory

  # configure_infrastructure:
  #   docker:
  #     - image: circleci/python:3.6.2
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: ["14:a3:98:7a:9a:f6:e8:42:1a:1f:41:0b:4d:3f:84:2f"]

  #     - run:
  #         name: Install Ansible
  #         command: |
  #           sudo apt-get install ansible

  #     - run:
  #         name: Run Playbook and configure server
  #         command: |
  #           ansible-playbook -i inventory main-remote.yml
  create_and_deploy_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute bucket.yml - Create Cloudfromation Stack
          command: |
            aws cloudformation deploy \
              --template-file bucket.yml \
              --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides myBucketName="my-bucket-${CIRCLE_WORKFLOW_ID:0:7}"
      - run: aws s3 sync . s3://my-bucket-${CIRCLE_WORKFLOW_ID:0:7} --delete

  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Fetch and save the old pipeline id (bucket name) responsible for the last release
          command: |
            aws cloudformation \
              list-exports --query "Exports[?Name==\'PipelineID\'].Value" \
              --no-paginate --output text > ~/textfile.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - textfile.txt

  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute Cloudfront.yml
          command: |
            aws cloudfromation deploy \
              --template-file cloudfront.yml \
              --stack-name production-distro \
              --parameter-overrides PipelineID="my-bucket-${CIRCLE_WORKFLOW_ID:0:7}"

  clean_up_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Destroy the previous S3 bucket and Cloudformation stack
          command: |
            export OldBucketID=$(cat ~/textfile.txt)
            aws s3 rm "s3://${OldBucketID}" --recursive




  # smoke_test:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - run:
  #         name: Test job
  #         command: |
  #           return 1
        
  #     - destroy_environment
        
# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  my_workflow:
    jobs:
      # - create_infrastructure
      # - smoke_test:
      #     requires:
      #       - create_infrastructure

      # - create_infrastructure
      # - capture:
      #     requires:
      #       - create_infrastructure
      # - configure_infrastructure:
      #     requires:
      #       - capture
      
      - create_and_deploy_front_end
      - promote_to_production:
          requires:
            - create_and_deploy_front_end
      - get_last_deployment_id
      - clean_up_front_end:
          requires:
            - get_last_deployment_id
            - promote_to_production
